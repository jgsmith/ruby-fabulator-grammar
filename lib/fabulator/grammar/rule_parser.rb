#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Fabulator
  module Grammar
    class RuleParser < Racc::Parser

module_eval(<<'...end rules.racc/module_eval...', 'rules.racc', 62)
  require 'fabulator/grammar'

  def parse(t)
    @source = t
    @curpos = 0
    @line = 0
    @col = 0

    @in_quantifier = false
       
    @yydebug = true

    @last_token = nil
       
    do_parse
  end

  def on_error(*args)
    raise Fabulator::Grammar::ParserError.new("unable to parse '#{args[1]}' near line #{@line + 1}, column #{@col}")
  end

  @@ops = {
    ':=' => :COLON_EQUAL,
    '['  => :LB,
    ']'  => :RB,
    '('  => :LP,
    ')'  => :RP,
    '{'  => :LC,
    '}'  => :RC,
    '?'  => :QUESTION,
    '.'  => :DOT,
    '..' => :DOT_DOT,
    '...'=> :DOT_DOT_DOT,
    '...!'=> :DOT_DOT_DOT_BANG,
    '|'  => :PIPE,
    ','  => :COMMA,
    ':'  => :COLON,
    '^'  => :CARET,
    '^^' => :CARET_CARET,
    '$'  => :DOLLAR,
    '$$' => :DOLLAR_DOLLAR,
  }

  @@regex = {
    :simple_tokens => %r{^(#{Regexp.union(@@ops.keys.sort_by{|a| a.length}.reverse.collect{ |k| k })})},
    :ncname => %r{(?:[a-zA-Z_][-a-zA-Z0-9_.]*)},
    :integer => %r{(\d+)},
    :literal => %r{((?:"(?:[^\\"]*(?:\\.[^\\"]*)*)")|(?:'(?:[^\\']*(?:\\.[^\\']*)*)'))},
  }

  @@regex[:general] = Regexp.compile(%{^(#{@@regex[:ncname]})|#{@@regex[:integer]}|#{@@regex[:literal]}})

  def next_token
    @token = nil  
    white_space = 0
    new_line = 0
    while @curpos < @source.length && @source[@curpos..@curpos] =~ /\s/ do
      if @source[@curpos..@curpos] =~ /\n/
        new_line = new_line + 1
        @line = @line + 1
        @col = 0
      else
        @col = @col + 1
      end   
      @curpos = @curpos + 1
      white_space = white_space + 1
    end
    
    # skip comments delimited by (:  :)
    # comments can be nested
    # these are XPath 2.0 comments
    #

    if @curpos < @source.length && @source[@curpos..@curpos+1] == '(:'
      comment_depth = 1
      @curpos = @curpos + 2
      @col = @col + 2
      while comment_depth > 0 && @curpos < @source.length
        if @source[@curpos..@curpos+1] == '(:'
          comment_depth = comment_depth + 1
          @curpos = @curpos + 1
          @col = @col + 1
        end
        if @source[@curpos..@curpos+1] == ':)'
          comment_depth = comment_depth - 1
          @curpos = @curpos + 1
          @col = @col + 1
        end
        @curpos = @curpos + 1
        @col = @col + 1
      end
      white_space = white_space + 1
    end
    
    while @curpos < @source.length && @source[@curpos..@curpos] =~ /\s/ do
      if @source[@curpos..@curpos] =~ /\n/
        new_line = new_line + 1
        @line = @line + 1
        @col = 0
      else
        @col = @col + 1
      end   
      @curpos = @curpos + 1
      white_space = white_space + 1
    end
    
    if @curpos >= @source.length
      @last_token = nil
      return [ false, false ]
    end

    res = @@regex[:simple_tokens].match(@source[@curpos..@source.length-1])
    if !res.nil?
      if !res[1].nil?  
        @token = [ @@ops[res[1]], res[1] ]
      end
    end
  
    if @token.nil?
      res = @@regex[:general].match(@source[@curpos..@source.length-1])
      if res.nil?
        raise "Failed to parse '#{@source}' at #{@curpos}': #{@source[@curpos..@source.length-1]}"
      end
  #ncname, integer, literal
      if !res[1].nil?
        @token = [:NCNAME, res[1].to_s]
      elsif !res[2].nil?
        @token = [:INTEGER, res[2].to_s]
      elsif !res[3].nil?
        @token = [:LITERAL, res[3].to_s]
        @token[1] = @token[1][1..@token[1].size-2]
        @col += 2
        @curpos += 2
      end
    end


    if @token.nil?
      puts "Uh oh... we don't know what to do: #{@source[@curpos .. @source.length-1]}"
      return [ nil, nil ]
    else
      @curpos += @token[1].length
      @col += @token[1].length
    end

    if !@token.nil? && @token[0] == :LP
       # shorthand: if we see '(s[ )]', '(s?[ )]', '(?)', '(\d', then we have
       if @curpos > 1 && ![' ', '('].include?(@source[@curpos-2 .. @curpos-2])
         @token[0] = :LLP
         @in_quantifier = true
       end
    elsif @in_quantifier
      @in_quantifier = false
      if @token[0] == :NCNAME
        @token[0] = case @token[1]
          when 's': :S
          else :NCNAME
        end
      end
    end

    if @token[0] == :LB
      @in_directive = true
    elsif @in_directive && @token[0] == :NCNAME
      @token[0] = @token[1].upcase.to_sym
      @in_directive = false
    end

  #  puts "token: #{@token.join(' => ')}"
    return @token
  end
...end rules.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    11,     3,    15,     4,    15,    47,    11,    25,    15,     6,
     8,    10,    14,    16,    17,     6,     8,    10,    14,    16,
    17,    35,     9,    12,     9,    12,    35,    46,     9,    12,
    15,    45,    35,    55,    35,    56,    52,    35,    57,    58,
    35,     9,    12,    35,    59,    35,     9,    12,    60,    35,
     9,    12,     9,    12,     9,    12,     4,     9,    12,    54,
     9,    12,    44,     9,    12,     9,    12,    64,    11,     9,
    12,    62,    36,    25,    66,    49,    67,     6,     8,    10,
    14,    16,    17,    28,    21,    69,    29,    30,    31,    32,
    27,    41,    70,    38,    39,    40 ]

racc_action_check = [
     2,     1,     2,     1,     6,    31,    22,    34,    22,     2,
     2,     2,     2,     2,     2,    22,    22,    22,    22,    22,
    22,    38,     2,     2,     6,     6,    55,    30,    22,    22,
     8,    29,    64,    40,    13,    41,    38,    27,    42,    44,
    39,    38,    38,    32,    48,    52,    55,    55,    51,    54,
     8,     8,    64,    64,    13,    13,    33,    27,    27,    39,
    39,    39,    28,    32,    32,    52,    52,    54,    19,    54,
    54,    53,    15,     7,    61,    33,    63,    19,    19,    19,
    19,    19,    19,    11,     3,    65,    11,    11,    11,    11,
    11,    25,    68,    25,    25,    25 ]

racc_action_pointer = [
   nil,     1,    -3,    84,   nil,   nil,    -1,    54,    25,   nil,
   nil,    79,   nil,    29,   nil,    54,   nil,   nil,   nil,    65,
   nil,   nil,     3,   nil,   nil,    71,   nil,    32,    57,    25,
    21,    -1,    38,    54,   -12,   nil,   nil,   nil,    16,    35,
    10,    14,    32,   nil,    33,   nil,   nil,   nil,    38,   nil,
   nil,    27,    40,    50,    44,    21,   nil,   nil,   nil,   nil,
   nil,    53,   nil,    55,    27,    64,   nil,   nil,    71,   nil,
   nil ]

racc_action_default = [
    -3,   -38,    -1,   -38,    -3,    -7,   -38,   -22,   -38,   -35,
   -17,   -38,    -3,   -38,   -18,   -37,   -19,   -20,    -4,    -5,
    -6,    71,    -2,   -15,   -21,   -38,   -16,   -33,   -38,   -38,
   -38,   -38,   -33,   -38,   -24,   -37,   -25,    -8,   -33,   -33,
   -38,   -38,   -38,   -34,   -38,   -10,   -11,   -12,   -38,   -36,
   -23,   -38,   -33,   -38,   -33,   -33,   -26,   -14,    -9,   -13,
   -27,   -38,   -29,   -38,   -33,   -38,   -28,   -32,   -38,   -31,
   -30 ]

racc_goto_table = [
    42,     1,    24,     7,    23,    48,    26,     7,    22,     7,
    37,    51,    53,    33,    34,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     7,   nil,    61,   nil,    63,    65,    50,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    68 ]

racc_goto_check = [
     7,     1,     9,     8,     5,     7,     5,     8,     2,     8,
     6,     7,     7,     1,     8,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     8,   nil,     7,   nil,     7,     7,     9,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     7 ]

racc_goto_pointer = [
   nil,     1,     4,   nil,   nil,    -2,    -9,   -27,     1,    -5,
   nil ]

racc_goto_default = [
   nil,   nil,     2,    18,    19,    20,     5,   nil,    43,   nil,
    13 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 28, :_reduce_1,
  3, 28, :_reduce_2,
  0, 29, :_reduce_3,
  2, 29, :_reduce_4,
  1, 30, :_reduce_none,
  1, 30, :_reduce_none,
  1, 31, :_reduce_7,
  2, 31, :_reduce_8,
  4, 33, :_reduce_9,
  3, 33, :_reduce_none,
  3, 33, :_reduce_none,
  3, 33, :_reduce_none,
  4, 33, :_reduce_13,
  4, 33, :_reduce_14,
  2, 33, :_reduce_15,
  2, 33, :_reduce_16,
  1, 33, :_reduce_17,
  1, 33, :_reduce_18,
  1, 33, :_reduce_19,
  1, 33, :_reduce_20,
  2, 32, :_reduce_21,
  1, 32, :_reduce_22,
  3, 32, :_reduce_23,
  2, 32, :_reduce_24,
  2, 37, :_reduce_25,
  3, 36, :_reduce_26,
  4, 36, :_reduce_27,
  5, 36, :_reduce_28,
  4, 36, :_reduce_29,
  6, 36, :_reduce_30,
  5, 36, :_reduce_31,
  5, 36, :_reduce_32,
  0, 34, :_reduce_none,
  1, 34, :_reduce_none,
  1, 35, :_reduce_35,
  3, 35, :_reduce_36,
  1, 35, :_reduce_37 ]

racc_reduce_n = 38

racc_shift_n = 71

racc_token_table = {
  false => 0,
  :error => 1,
  :PIPE => 2,
  :LB => 3,
  :MODE => 4,
  :NCNAME => 5,
  :RB => 6,
  :COMMIT => 7,
  :UNCOMMIT => 8,
  :REJECT => 9,
  :SKIP => 10,
  :RESYNC => 11,
  :DOT_DOT_DOT => 12,
  :DOT_DOT_DOT_BANG => 13,
  :CARET => 14,
  :CARET_CARET => 15,
  :DOLLAR => 16,
  :DOLLAR_DOLLAR => 17,
  :COLON_EQUAL => 18,
  :LLP => 19,
  :QUESTION => 20,
  :RP => 21,
  :S => 22,
  :INTEGER => 23,
  :DOT_DOT => 24,
  :LITERAL => 25,
  :LP => 26 }

racc_nt_base = 27

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "PIPE",
  "LB",
  "MODE",
  "NCNAME",
  "RB",
  "COMMIT",
  "UNCOMMIT",
  "REJECT",
  "SKIP",
  "RESYNC",
  "DOT_DOT_DOT",
  "DOT_DOT_DOT_BANG",
  "CARET",
  "CARET_CARET",
  "DOLLAR",
  "DOLLAR_DOLLAR",
  "COLON_EQUAL",
  "LLP",
  "QUESTION",
  "RP",
  "S",
  "INTEGER",
  "DOT_DOT",
  "LITERAL",
  "LP",
  "$start",
  "rules",
  "rule",
  "rule_bit",
  "directives",
  "sequence",
  "directive",
  "opt_separator",
  "atom",
  "sequence_qualifiers",
  "hypothetical" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'rules.racc', 6)
  def _reduce_1(val, _values, result)
     result = Fabulator::Grammar::Expr::Rule.new; result.add_alternative(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 7)
  def _reduce_2(val, _values, result)
     result = val[0]; result.add_alternative(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 9)
  def _reduce_3(val, _values, result)
     result = Fabulator::Grammar::Expr::RuleAlternative.new; 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 10)
  def _reduce_4(val, _values, result)
     result = val[0]; result.add_sequence(val[1]) 
    result
  end
.,.,

# reduce 5 omitted

# reduce 6 omitted

module_eval(<<'.,.,', 'rules.racc', 15)
  def _reduce_7(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 16)
  def _reduce_8(val, _values, result)
     result = val[0] + [ val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 18)
  def _reduce_9(val, _values, result)
     result = Fabulator::Grammar::Expr::RuleMode.new(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

module_eval(<<'.,.,', 'rules.racc', 22)
  def _reduce_13(val, _values, result)
     result = Fabulator::Grammar::Expr::SetSkip.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 23)
  def _reduce_14(val, _values, result)
     result = Fabulator::Grammar::Expr::Resync.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 24)
  def _reduce_15(val, _values, result)
     result = Fabulator::Grammar::Expr::LookAhead.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 25)
  def _reduce_16(val, _values, result)
     result = Fabulator::Grammar::Expr::NegLookAhead.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 26)
  def _reduce_17(val, _values, result)
     result = Fabulator::Grammar::Expr::Anchor.new(:start_of_line) 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 27)
  def _reduce_18(val, _values, result)
     result = Fabulator::Grammar::Expr::Anchor.new(:start_of_string) 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 28)
  def _reduce_19(val, _values, result)
     result = Fabulator::Grammar::Expr::Anchor.new(:end_of_line) 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 29)
  def _reduce_20(val, _values, result)
     result = Fabulator::Grammar::Expr::Anchor.new(:end_of_string) 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 31)
  def _reduce_21(val, _values, result)
     result = Fabulator::Grammar::Expr::RuleSequence.new(nil, val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 32)
  def _reduce_22(val, _values, result)
     result = Fabulator::Grammar::Expr::RuleSequence.new(nil, val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 33)
  def _reduce_23(val, _values, result)
     result = Fabulator::Grammar::Expr::RuleSequence.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 34)
  def _reduce_24(val, _values, result)
     result = Fabulator::Grammar::Expr::RuleSequence.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 36)
  def _reduce_25(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 44)
  def _reduce_26(val, _values, result)
     result = [ '?' ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 45)
  def _reduce_27(val, _values, result)
     result = [ 's', val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 46)
  def _reduce_28(val, _values, result)
     result = [ 's?', val[3] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 47)
  def _reduce_29(val, _values, result)
     result = [ 'count', val[1], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 48)
  def _reduce_30(val, _values, result)
     result = [ 'range', [ val[1], val[3] ], val[4] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 49)
  def _reduce_31(val, _values, result)
     result = [ 'upto', val[2], val[3] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 50)
  def _reduce_32(val, _values, result)
     result = [ 'atleast', val[1],val[3] ] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'rules.racc', 55)
  def _reduce_35(val, _values, result)
     result = Fabulator::Grammar::Expr::Text.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 56)
  def _reduce_36(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 57)
  def _reduce_37(val, _values, result)
     result = Fabulator::Grammar::Expr::RuleRef.new(val[0]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class RuleParser
    end   # module Grammar
  end   # module Fabulator
