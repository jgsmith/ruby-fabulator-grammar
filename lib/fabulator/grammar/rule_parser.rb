#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Fabulator
  module Grammar
    class RuleParser < Racc::Parser

module_eval(<<'...end rules.racc/module_eval...', 'rules.racc', 53)
  require 'fabulator/grammar'

  def parse(t)
    @source = t
    @curpos = 0
    @line = 0
    @col = 0

    @in_quantifier = false
       
    @yydebug = true

    @last_token = nil
       
    do_parse
  end

  def on_error(*args)
    raise Fabulator::Grammar::ParserError.new("unable to parse '#{args[1]}' near line #{@line + 1}, column #{@col}")
  end

  @@ops = {
    ':=' => :COLON_EQUAL,
    '['  => :LB,
    ']'  => :RB,
    '('  => :LP,
    ')'  => :RP,
    '{'  => :LC,
    '}'  => :RC,
    '?'  => :QUESTION,
    '.'  => :DOT,
    '..' => :DOT_DOT,
    '|'  => :PIPE,
    ','  => :COMMA,
    ':'  => :COLON
  }

  @@regex = {
    :simple_tokens => %r{^(#{Regexp.union(@@ops.keys.sort_by{|a| a.length}.reverse.collect{ |k| k })})},
    :ncname => %r{(?:[a-zA-Z_][-a-zA-Z0-9_.]*)},
    :integer => %r{(\d+)},
    :literal => %r{((?:"(?:[^\\"]*(?:\\.[^\\"]*)*)")|(?:'(?:[^\\']*(?:\\.[^\\']*)*)'))},
  }

  @@regex[:general] = Regexp.compile(%{^(#{@@regex[:ncname]})|#{@@regex[:integer]}|#{@@regex[:literal]}})

  def next_token
    @token = nil  
    white_space = 0
    new_line = 0
    while @curpos < @source.length && @source[@curpos..@curpos] =~ /\s/ do
      if @source[@curpos..@curpos] =~ /\n/
        new_line = new_line + 1
        @line = @line + 1
        @col = 0
      else
        @col = @col + 1
      end   
      @curpos = @curpos + 1
      white_space = white_space + 1
    end
    
    # skip comments delimited by (:  :)
    # comments can be nested
    # these are XPath 2.0 comments
    #

    if @curpos < @source.length && @source[@curpos..@curpos+1] == '(:'
      comment_depth = 1
      @curpos = @curpos + 2
      @col = @col + 2
      while comment_depth > 0 && @curpos < @source.length
        if @source[@curpos..@curpos+1] == '(:'
          comment_depth = comment_depth + 1
          @curpos = @curpos + 1
          @col = @col + 1
        end
        if @source[@curpos..@curpos+1] == ':)'
          comment_depth = comment_depth - 1
          @curpos = @curpos + 1
          @col = @col + 1
        end
        @curpos = @curpos + 1
        @col = @col + 1
      end
      white_space = white_space + 1
    end
    
    while @curpos < @source.length && @source[@curpos..@curpos] =~ /\s/ do
      if @source[@curpos..@curpos] =~ /\n/
        new_line = new_line + 1
        @line = @line + 1
        @col = 0
      else
        @col = @col + 1
      end   
      @curpos = @curpos + 1
      white_space = white_space + 1
    end
    
    if @curpos >= @source.length
      @last_token = nil
      return [ false, false ]
    end

    res = @@regex[:simple_tokens].match(@source[@curpos..@source.length-1])
    if !res.nil?
      if !res[1].nil?  
        @token = [ @@ops[res[1]], res[1] ]
      end
    end
  
    if @token.nil?
      res = @@regex[:general].match(@source[@curpos..@source.length-1])
      if res.nil?
        raise "Failed to parse '#{@source}' at #{@curpos}': #{@source[@curpos..@source.length-1]}"
      end
  #ncname, integer, literal
      if !res[1].nil?
        @token = [:NCNAME, res[1].to_s]
      elsif !res[2].nil?
        @token = [:INTEGER, res[2].to_s]
      elsif !res[3].nil?
        @token = [:LITERAL, res[3].to_s]
        @token[1] = @token[1][1..@token[1].size-2]
        @col += 2
        @curpos += 2
      end
    end


    if @token.nil?
      puts "Uh oh... we don't know what to do: #{@source[@curpos .. @source.length-1]}"
      return [ nil, nil ]
    else
      @curpos += @token[1].length
      @col += @token[1].length
    end

    if !@token.nil? && @token[0] == :LP
       # shorthand: if we see '(s[ )]', '(s?[ )]', '(?)', '(\d', then we have
       if @curpos > 1 && ![' ', '('].include?(@source[@curpos-2 .. @curpos-2])
         @token[0] = :LLP
         @in_quantifier = true
       end
    elsif @in_quantifier
      @in_quantifier = false
      if @token[0] == :NCNAME
        @token[0] = case @token[1]
          when 's': :S
          else :NCNAME
        end
      end
    end

    if @token[0] == :LB
      @in_directive = true
      @past_directive = false
    elsif @in_directive && @token[0] == :NCNAME
      if !@past_directive
        @token[0] = @token[1].to_sym
        @past_directive = true
      end
    end

    #puts "token: #{@token.join(' => ')}"
    return @token
  end
...end rules.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
     5,    -5,     4,     7,     5,    -5,    29,     7,    31,    26,
    30,    26,    32,    11,    24,    26,    41,    -5,    -5,    26,
    35,    -5,    -5,    53,    26,    15,    16,    15,    16,    15,
    16,    15,    16,    26,    34,    15,    16,     3,    42,     4,
    15,    16,    26,    36,    43,    37,    38,    39,    48,    15,
    16,    44,    19,    45,    20,    21,    17,    18,    15,    16,
    33,    24,    50,    23,    52,    22,    55,    10,    57,     8,
    59,    60,    61 ]

racc_action_check = [
     2,     2,    28,     2,     9,     9,    17,     9,    18,    48,
    17,    50,    18,     6,    27,    14,    28,     2,     2,    45,
    21,     9,     9,    48,    53,    48,    48,    50,    50,     6,
     6,    14,    14,    38,    20,    45,    45,     1,    29,     1,
    53,    53,    37,    24,    31,    24,    24,    24,    38,    38,
    38,    36,     7,    37,     7,     7,     7,     7,    37,    37,
    19,    13,    39,    11,    47,    10,    49,     5,    51,     3,
    54,    56,    58 ]

racc_action_pointer = [
   nil,    37,    -3,    69,   nil,    63,     9,    45,   nil,     1,
    60,    50,   nil,    47,    11,   nil,   nil,     2,     4,    52,
    26,    12,   nil,   nil,    28,   nil,   nil,     0,     0,    30,
   nil,    36,   nil,   nil,   nil,   nil,    35,    38,    29,    44,
   nil,   nil,   nil,   nil,   nil,    15,   nil,    48,     5,    50,
     7,    52,   nil,    20,    54,   nil,    55,   nil,    56,   nil,
   nil,   nil ]

racc_action_default = [
    -3,   -31,    -1,   -31,    -3,   -31,   -31,   -31,    62,    -2,
   -31,   -30,    -4,   -15,   -31,   -28,    -3,   -31,   -31,   -31,
   -31,   -31,    -6,   -18,   -31,   -14,   -30,   -17,   -31,   -31,
   -11,   -31,   -13,    -7,    -8,    -9,   -31,   -26,   -26,   -31,
   -16,   -29,   -10,   -12,   -19,   -26,   -27,   -31,   -26,   -31,
   -26,   -31,   -20,   -26,   -31,   -22,   -31,   -21,   -31,   -25,
   -24,   -23 ]

racc_goto_table = [
     1,    47,    49,    13,    25,     9,    14,    12,   nil,    51,
   nil,    27,    54,   nil,    56,   nil,    28,    58,    40 ]

racc_goto_check = [
     1,     8,     8,     5,     6,     2,     7,     4,   nil,     8,
   nil,     5,     8,   nil,     8,   nil,     1,     8,     6 ]

racc_goto_pointer = [
   nil,     0,     1,   nil,     1,    -3,    -9,     0,   -36 ]

racc_goto_default = [
   nil,   nil,     2,     6,   nil,    46,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 23, :_reduce_1,
  3, 23, :_reduce_2,
  0, 24, :_reduce_3,
  3, 24, :_reduce_4,
  0, 25, :_reduce_none,
  3, 25, :_reduce_6,
  3, 25, :_reduce_none,
  3, 25, :_reduce_none,
  3, 25, :_reduce_none,
  4, 25, :_reduce_none,
  3, 25, :_reduce_none,
  4, 25, :_reduce_none,
  3, 25, :_reduce_none,
  2, 26, :_reduce_14,
  1, 26, :_reduce_15,
  3, 26, :_reduce_16,
  2, 26, :_reduce_17,
  2, 29, :_reduce_18,
  3, 28, :_reduce_19,
  4, 28, :_reduce_20,
  5, 28, :_reduce_21,
  4, 28, :_reduce_22,
  6, 28, :_reduce_23,
  5, 28, :_reduce_24,
  5, 28, :_reduce_25,
  0, 30, :_reduce_none,
  1, 30, :_reduce_none,
  1, 27, :_reduce_28,
  3, 27, :_reduce_29,
  1, 27, :_reduce_30 ]

racc_reduce_n = 31

racc_shift_n = 62

racc_token_table = {
  false => 0,
  :error => 1,
  :PIPE => 2,
  :LC => 3,
  :NCNAME => 4,
  :RC => 5,
  :LB => 6,
  :commit => 7,
  :RB => 8,
  :uncommit => 9,
  :reject => 10,
  :skip => 11,
  :resync => 12,
  :COLON_EQUAL => 13,
  :LLP => 14,
  :QUESTION => 15,
  :RP => 16,
  :S => 17,
  :INTEGER => 18,
  :DOT_DOT => 19,
  :LITERAL => 20,
  :LP => 21 }

racc_nt_base = 22

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "PIPE",
  "LC",
  "NCNAME",
  "RC",
  "LB",
  "commit",
  "RB",
  "uncommit",
  "reject",
  "skip",
  "resync",
  "COLON_EQUAL",
  "LLP",
  "QUESTION",
  "RP",
  "S",
  "INTEGER",
  "DOT_DOT",
  "LITERAL",
  "LP",
  "$start",
  "rules",
  "rule",
  "directive",
  "sequence",
  "atom",
  "sequence_qualifiers",
  "hypothetical",
  "opt_separator" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'rules.racc', 6)
  def _reduce_1(val, _values, result)
     result = Fabulator::Grammar::Expr::Rule.new; result.add_alternative(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 7)
  def _reduce_2(val, _values, result)
     result = val[0]; result.add_alternative(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 9)
  def _reduce_3(val, _values, result)
     result = Fabulator::Grammar::Expr::RuleAlternative.new; 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 10)
  def _reduce_4(val, _values, result)
     result = val[0]; result.add_directive(val[1]); result.add_sequence(val[2]); 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'rules.racc', 13)
  def _reduce_6(val, _values, result)
     result = Fabulator::Grammar::Expr::RuleMode.new(val[1]) 
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

module_eval(<<'.,.,', 'rules.racc', 22)
  def _reduce_14(val, _values, result)
     result = Fabulator::Grammar::Expr::RuleSequence.new(nil, val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 23)
  def _reduce_15(val, _values, result)
     result = Fabulator::Grammar::Expr::RuleSequence.new(nil, val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 24)
  def _reduce_16(val, _values, result)
     result = Fabulator::Grammar::Expr::RuleSequence.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 25)
  def _reduce_17(val, _values, result)
     result = Fabulator::Grammar::Expr::RuleSequence.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 27)
  def _reduce_18(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 35)
  def _reduce_19(val, _values, result)
     result = [ '?' ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 36)
  def _reduce_20(val, _values, result)
     result = [ 's', val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 37)
  def _reduce_21(val, _values, result)
     result = [ 's?', val[3] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 38)
  def _reduce_22(val, _values, result)
     result = [ 'count', val[1], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 39)
  def _reduce_23(val, _values, result)
     result = [ 'range', [ val[1], val[3] ], val[4] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 40)
  def _reduce_24(val, _values, result)
     result = [ 'upto', val[2], val[3] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 41)
  def _reduce_25(val, _values, result)
     result = [ 'atleast', val[1],val[3] ] 
    result
  end
.,.,

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'rules.racc', 46)
  def _reduce_28(val, _values, result)
     result = Fabulator::Grammar::Expr::Text.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 47)
  def _reduce_29(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'rules.racc', 48)
  def _reduce_30(val, _values, result)
     result = Fabulator::Grammar::Expr::RuleRef.new(val[0]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class RuleParser
    end   # module Grammar
  end   # module Fabulator
