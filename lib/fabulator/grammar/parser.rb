#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Fabulator
  module Grammar
    class Parser < Racc::Parser

module_eval(<<'...end regex.racc/module_eval...', 'regex.racc', 48)
  require 'fabulator/grammar'

  def parse(t, ctx)
    @source = t
    @curpos = 0 
    @context = ctx
    @line = 0   

    @yydebug = true
      
    @last_token = nil
  
    do_parse
  end
    
  def on_error(*args)
    raise Fabulator::Grammar::ParserError.new("unable to parse '#{args[1]}' near line #{@line + 1}, column #{@col}")
  end

  @@regex = {
    :ncname => %r{(?:[a-zA-Z_][-a-zA-Z0-9_.]*)}
  }

  @@regex[:qname] = %r{((?:#{@@regex[:ncname]}:)?#{@@regex[:ncname]})}

  def next_token
    @token = nil
    white_space = 0
    new_line = 0
    @col = 0
    while @curpos < @source.length && @source[@curpos..@curpos] =~ /\s/ do
      if @source[@curpos..@curpos] =~ /\n/
        new_line = new_line + 1
        @line = @line + 1
        @col = 0
      else
        @col = @col + 1
      end
      @curpos = @curpos + 1
      white_space = white_space + 1   
    end

    # skip comments delimited by (:  :)
    # comments can be nested
    # these are XPath 2.0 comments
    #
    if @curpos < @source.length && @source[@curpos..@curpos+1] == '(:'
      comment_depth = 1
      @curpos = @curpos + 2
      @col = @col + 2
      while comment_depth > 0 && @curpos < @source.length
        if @source[@curpos..@curpos+1] == '(:'
          comment_depth = comment_depth + 1
          @curpos = @curpos + 1
          @col = @col + 1
        end
        if @source[@curpos..@curpos+1] == ':)'
          comment_depth = comment_depth - 1
          @curpos = @curpos + 1
          @col = @col + 1
        end
        @curpos = @curpos + 1
        @col = @col + 1
      end
      white_space = white_space + 1
    end

    while @curpos < @source.length && @source[@curpos..@curpos] =~ /\s/ do
      if @source[@curpos..@curpos] =~ /\n/
        new_line = new_line + 1
        @line = @line + 1
        @col = 0
      else
        @col = @col + 1
      end
      @curpos = @curpos + 1
      white_space = white_space + 1
    end

    if @curpos >= @source.length
      @last_token = nil
      return [ false, false ]
    end

    case @source[@curpos..@curpos]
      when '<': @token = [ :LT, '<' ]
      when '>': @token = [ :GT, '>' ]
      when '[': @token = [ :LB, '[' ]
      when ']': @token = [ :RB, ']' ]
      when '(': @token = [ :LP, '(' ]
      when ')': @token = [ :RP, ')' ]
      when '{': @token = [ :LC, '{' ]
      when '}': @token = [ :RC, '}' ]
      when ':': @token = [ :COLON, ':' ]
      when ',': @token = [ :COMMA, ',' ]
      when '|': @token = [ :PIPE, '|' ]
      when '*': @token = [ :STAR, '*' ]
      when '+': @token = [ :PLUS, '+' ]
      when '.': @token = [ :DOT,  '.' ]
      when '?': @token = [ :QUESTION, '?' ]
      when '$': @token = [ :DOLLAR, '$' ]
      when '^': @token = [ :CARET, '^' ]
    end

    if @token.nil?
      # get longest sequence of non-special characters
      # if it's all digits, report INTEGER
      # if it's a qname, report QNAME
      # otherwise, report TEXT
      @source[@curpos..@source.length-1] =~ /^(((\\.)|[^ \$\^\[\]<>\{\}\(\):,|*+.?])+)*/
      text = $1
      bits = text.split(/\\/)
      text = bits.join('')
      @curpos += bits.size - 1
      if text.length > 0
        if @source[@curpos+text.length .. @curpos+text.length] =~ /[*?+\{]/
          text = text[0..text.length-2]
          @token = [ :TEXT, text ]
        else
          case text
            when /^\d+$/: @token = [ :INTEGER, text ]
            when /^#{@@regex[:ncname]}$/: @token = [ :NCNAME, text ]
            else @token = [ :TEXT, text ]
          end
        end
      end
    end

    if @token.nil?
      puts "Uh oh... we don't know what to do: #{@source[@curpos .. @source.length-1]}"
    else
      @curpos += @token[1].length
    end

    return @token
  end
...end regex.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    31,    45,    25,    26,    28,    29,    35,     6,    46,     8,
     9,    10,    12,    13,    39,    16,    17,     5,    19,     6,
     8,     9,    10,    22,    13,    10,    16,    17,    33,    19,
    34,     8,     9,    10,     8,     9,    10,    42,    43,     3,
    36,    37,    38,    23,     3,    41,    20,    44,     3,    47,
    48,    49 ]

racc_action_check = [
    19,    43,    14,    14,    14,    14,    25,    30,    43,    19,
    19,    19,     4,     4,    30,     4,     4,     1,     4,     1,
     4,     4,     4,     7,     7,    13,     7,     7,    23,     7,
    24,     7,     7,     7,    31,    31,    31,    38,    38,    17,
    26,    28,    29,    10,     6,    32,     5,    40,     0,    45,
    46,    47 ]

racc_action_pointer = [
    45,    17,   nil,   nil,     8,    46,    41,    19,   nil,   nil,
    28,   nil,   nil,    11,   -14,   nil,   nil,    36,   nil,    -3,
   nil,   nil,   nil,    14,    24,   -11,    23,   nil,    24,    29,
     5,    22,    34,   nil,   nil,   nil,   nil,   nil,    17,   nil,
    36,   nil,   nil,   -12,   nil,    29,    33,    34,   nil,   nil ]

racc_action_default = [
    -7,   -33,    -1,    -7,    -3,   -33,    -7,    -4,   -18,   -19,
   -20,    -8,    -5,   -33,   -10,   -17,   -13,    -7,   -12,   -33,
    50,    -2,    -6,   -33,   -33,   -22,   -26,    -9,   -24,   -33,
   -33,   -33,   -33,   -21,   -11,   -23,   -27,   -25,   -33,   -14,
   -33,   -15,   -28,   -33,   -16,   -33,   -30,   -29,   -31,   -32 ]

racc_goto_table = [
     1,    32,     7,    21,    24,    27,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    40,   nil,   nil,   nil,    30 ]

racc_goto_check = [
     1,     8,     3,     2,     7,     6,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     8,   nil,   nil,   nil,     1 ]

racc_goto_pointer = [
   nil,     0,    -3,    -1,   nil,   nil,    -9,    -9,   -18 ]

racc_goto_default = [
   nil,   nil,     2,     4,    11,    14,   nil,    15,    18 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 23, :_reduce_1,
  3, 23, :_reduce_2,
  1, 24, :_reduce_3,
  2, 24, :_reduce_4,
  2, 24, :_reduce_5,
  3, 24, :_reduce_6,
  0, 25, :_reduce_7,
  2, 25, :_reduce_8,
  2, 26, :_reduce_9,
  1, 26, :_reduce_10,
  3, 27, :_reduce_11,
  1, 27, :_reduce_12,
  1, 27, :_reduce_13,
  3, 27, :_reduce_14,
  3, 27, :_reduce_15,
  4, 27, :_reduce_16,
  1, 30, :_reduce_17,
  1, 30, :_reduce_18,
  1, 30, :_reduce_19,
  1, 29, :_reduce_20,
  3, 29, :_reduce_21,
  1, 28, :_reduce_22,
  2, 28, :_reduce_23,
  1, 28, :_reduce_24,
  2, 28, :_reduce_25,
  1, 28, :_reduce_26,
  2, 28, :_reduce_27,
  3, 28, :_reduce_28,
  5, 28, :_reduce_29,
  4, 28, :_reduce_30,
  5, 28, :_reduce_31,
  6, 28, :_reduce_32 ]

racc_reduce_n = 33

racc_shift_n = 50

racc_token_table = {
  false => 0,
  :error => 1,
  :PIPE => 2,
  :CARET => 3,
  :DOLLAR => 4,
  :LT => 5,
  :GT => 6,
  :DOT => 7,
  :LP => 8,
  :RP => 9,
  :LB => 10,
  :RB => 11,
  :TEXT => 12,
  :INTEGER => 13,
  :NCNAME => 14,
  :COLON => 15,
  :STAR => 16,
  :QUESTION => 17,
  :PLUS => 18,
  :LC => 19,
  :RC => 20,
  :COMMA => 21 }

racc_nt_base = 22

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "PIPE",
  "CARET",
  "DOLLAR",
  "LT",
  "GT",
  "DOT",
  "LP",
  "RP",
  "LB",
  "RB",
  "TEXT",
  "INTEGER",
  "NCNAME",
  "COLON",
  "STAR",
  "QUESTION",
  "PLUS",
  "LC",
  "RC",
  "COMMA",
  "$start",
  "rules",
  "anchored_rule",
  "rule",
  "sequence",
  "sub_sequence",
  "sequence_qualifiers",
  "qname",
  "text" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'regex.racc', 5)
  def _reduce_1(val, _values, result)
     result = Fabulator::Grammar::Expr::Rules.new; result.add_alternative(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 6)
  def _reduce_2(val, _values, result)
     result = val[0]; result.add_alternative(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 8)
  def _reduce_3(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 9)
  def _reduce_4(val, _values, result)
     result = val[1]; result.anchor_start 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 10)
  def _reduce_5(val, _values, result)
     result = val[0]; result.anchor_end 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 11)
  def _reduce_6(val, _values, result)
     result = val[1]; result.anchor_start; result.anchor_end 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 13)
  def _reduce_7(val, _values, result)
     result = Fabulator::Grammar::Expr::Rule.new; 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 14)
  def _reduce_8(val, _values, result)
     result = val[0]; result.add_sequence(val[1]); 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 16)
  def _reduce_9(val, _values, result)
     result = Fabulator::Grammar::Expr::Sequence.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 17)
  def _reduce_10(val, _values, result)
     result = Fabulator::Grammar::Expr::Sequence.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 19)
  def _reduce_11(val, _values, result)
     result = Fabulator::Grammar::Expr::RuleRef.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 20)
  def _reduce_12(val, _values, result)
     result = Fabulator::Grammar::Expr::Text.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 21)
  def _reduce_13(val, _values, result)
     result = Fabulator::Grammar::Expr::Any.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 22)
  def _reduce_14(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 23)
  def _reduce_15(val, _values, result)
     result = Fabulator::Grammar::Expr::CharSet.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 24)
  def _reduce_16(val, _values, result)
     result = Fabulator::Grammar::Expr::CharSet.new(val[2]); result.inverted 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 26)
  def _reduce_17(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 27)
  def _reduce_18(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 28)
  def _reduce_19(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 30)
  def _reduce_20(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 31)
  def _reduce_21(val, _values, result)
     result = val[0] + ':' + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 33)
  def _reduce_22(val, _values, result)
     result = [ :zero_or_more ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 34)
  def _reduce_23(val, _values, result)
     result = [ :zero_or_more, :min ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 35)
  def _reduce_24(val, _values, result)
     result = [ :one_or_more ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 36)
  def _reduce_25(val, _values, result)
     result = [ :one_or_more, :min ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 37)
  def _reduce_26(val, _values, result)
     result = [ :zero_or_one ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 38)
  def _reduce_27(val, _values, result)
     result = [ :zero_or_one, :min ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 39)
  def _reduce_28(val, _values, result)
     result = [ :exact, val[1].to_i ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 40)
  def _reduce_29(val, _values, result)
     result = [ :range, val[1].to_i, val[3].to_i ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 41)
  def _reduce_30(val, _values, result)
     result = [ :range, val[1], '' ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 42)
  def _reduce_31(val, _values, result)
     result = [ :min, :range, val[1], '' ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'regex.racc', 43)
  def _reduce_32(val, _values, result)
     result = [ :min, :range, val[1].to_i, val[3].to_i ] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Grammar
  end   # module Fabulator
